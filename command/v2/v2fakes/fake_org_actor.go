// This file was generated by counterfeiter
package v2fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v2action"
	"code.cloudfoundry.org/cli/command/v2"
)

type FakeOrgActor struct {
	GetOrganizationByNameStub        func(orgName string) (v2action.Organization, v2action.Warnings, error)
	getOrganizationByNameMutex       sync.RWMutex
	getOrganizationByNameArgsForCall []struct {
		orgName string
	}
	getOrganizationByNameReturns struct {
		result1 v2action.Organization
		result2 v2action.Warnings
		result3 error
	}
	GetOrganizationDomainNamesStub        func(orgGUID string) ([]string, v2action.Warnings, error)
	getOrganizationDomainNamesMutex       sync.RWMutex
	getOrganizationDomainNamesArgsForCall []struct {
		orgGUID string
	}
	getOrganizationDomainNamesReturns struct {
		result1 []string
		result2 v2action.Warnings
		result3 error
	}
	GetQuotaDefinitionStub        func(quotaDefinitionGUID string) (v2action.QuotaDefinition, v2action.Warnings, error)
	getQuotaDefinitionMutex       sync.RWMutex
	getQuotaDefinitionArgsForCall []struct {
		quotaDefinitionGUID string
	}
	getQuotaDefinitionReturns struct {
		result1 v2action.QuotaDefinition
		result2 v2action.Warnings
		result3 error
	}
	GetOrganizationSpacesStub        func(orgGUID string) ([]v2action.Space, v2action.Warnings, error)
	getOrganizationSpacesMutex       sync.RWMutex
	getOrganizationSpacesArgsForCall []struct {
		orgGUID string
	}
	getOrganizationSpacesReturns struct {
		result1 []v2action.Space
		result2 v2action.Warnings
		result3 error
	}
	GetOrganizationSpaceQuotaDefinitionsStub        func(orgGUID string) ([]v2action.SpaceQuotaDefinition, v2action.Warnings, error)
	getOrganizationSpaceQuotaDefinitionsMutex       sync.RWMutex
	getOrganizationSpaceQuotaDefinitionsArgsForCall []struct {
		orgGUID string
	}
	getOrganizationSpaceQuotaDefinitionsReturns struct {
		result1 []v2action.SpaceQuotaDefinition
		result2 v2action.Warnings
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeOrgActor) GetOrganizationByName(orgName string) (v2action.Organization, v2action.Warnings, error) {
	fake.getOrganizationByNameMutex.Lock()
	fake.getOrganizationByNameArgsForCall = append(fake.getOrganizationByNameArgsForCall, struct {
		orgName string
	}{orgName})
	fake.recordInvocation("GetOrganizationByName", []interface{}{orgName})
	fake.getOrganizationByNameMutex.Unlock()
	if fake.GetOrganizationByNameStub != nil {
		return fake.GetOrganizationByNameStub(orgName)
	} else {
		return fake.getOrganizationByNameReturns.result1, fake.getOrganizationByNameReturns.result2, fake.getOrganizationByNameReturns.result3
	}
}

func (fake *FakeOrgActor) GetOrganizationByNameCallCount() int {
	fake.getOrganizationByNameMutex.RLock()
	defer fake.getOrganizationByNameMutex.RUnlock()
	return len(fake.getOrganizationByNameArgsForCall)
}

func (fake *FakeOrgActor) GetOrganizationByNameArgsForCall(i int) string {
	fake.getOrganizationByNameMutex.RLock()
	defer fake.getOrganizationByNameMutex.RUnlock()
	return fake.getOrganizationByNameArgsForCall[i].orgName
}

func (fake *FakeOrgActor) GetOrganizationByNameReturns(result1 v2action.Organization, result2 v2action.Warnings, result3 error) {
	fake.GetOrganizationByNameStub = nil
	fake.getOrganizationByNameReturns = struct {
		result1 v2action.Organization
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeOrgActor) GetOrganizationDomainNames(orgGUID string) ([]string, v2action.Warnings, error) {
	fake.getOrganizationDomainNamesMutex.Lock()
	fake.getOrganizationDomainNamesArgsForCall = append(fake.getOrganizationDomainNamesArgsForCall, struct {
		orgGUID string
	}{orgGUID})
	fake.recordInvocation("GetOrganizationDomainNames", []interface{}{orgGUID})
	fake.getOrganizationDomainNamesMutex.Unlock()
	if fake.GetOrganizationDomainNamesStub != nil {
		return fake.GetOrganizationDomainNamesStub(orgGUID)
	} else {
		return fake.getOrganizationDomainNamesReturns.result1, fake.getOrganizationDomainNamesReturns.result2, fake.getOrganizationDomainNamesReturns.result3
	}
}

func (fake *FakeOrgActor) GetOrganizationDomainNamesCallCount() int {
	fake.getOrganizationDomainNamesMutex.RLock()
	defer fake.getOrganizationDomainNamesMutex.RUnlock()
	return len(fake.getOrganizationDomainNamesArgsForCall)
}

func (fake *FakeOrgActor) GetOrganizationDomainNamesArgsForCall(i int) string {
	fake.getOrganizationDomainNamesMutex.RLock()
	defer fake.getOrganizationDomainNamesMutex.RUnlock()
	return fake.getOrganizationDomainNamesArgsForCall[i].orgGUID
}

func (fake *FakeOrgActor) GetOrganizationDomainNamesReturns(result1 []string, result2 v2action.Warnings, result3 error) {
	fake.GetOrganizationDomainNamesStub = nil
	fake.getOrganizationDomainNamesReturns = struct {
		result1 []string
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeOrgActor) GetQuotaDefinition(quotaDefinitionGUID string) (v2action.QuotaDefinition, v2action.Warnings, error) {
	fake.getQuotaDefinitionMutex.Lock()
	fake.getQuotaDefinitionArgsForCall = append(fake.getQuotaDefinitionArgsForCall, struct {
		quotaDefinitionGUID string
	}{quotaDefinitionGUID})
	fake.recordInvocation("GetQuotaDefinition", []interface{}{quotaDefinitionGUID})
	fake.getQuotaDefinitionMutex.Unlock()
	if fake.GetQuotaDefinitionStub != nil {
		return fake.GetQuotaDefinitionStub(quotaDefinitionGUID)
	} else {
		return fake.getQuotaDefinitionReturns.result1, fake.getQuotaDefinitionReturns.result2, fake.getQuotaDefinitionReturns.result3
	}
}

func (fake *FakeOrgActor) GetQuotaDefinitionCallCount() int {
	fake.getQuotaDefinitionMutex.RLock()
	defer fake.getQuotaDefinitionMutex.RUnlock()
	return len(fake.getQuotaDefinitionArgsForCall)
}

func (fake *FakeOrgActor) GetQuotaDefinitionArgsForCall(i int) string {
	fake.getQuotaDefinitionMutex.RLock()
	defer fake.getQuotaDefinitionMutex.RUnlock()
	return fake.getQuotaDefinitionArgsForCall[i].quotaDefinitionGUID
}

func (fake *FakeOrgActor) GetQuotaDefinitionReturns(result1 v2action.QuotaDefinition, result2 v2action.Warnings, result3 error) {
	fake.GetQuotaDefinitionStub = nil
	fake.getQuotaDefinitionReturns = struct {
		result1 v2action.QuotaDefinition
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeOrgActor) GetOrganizationSpaces(orgGUID string) ([]v2action.Space, v2action.Warnings, error) {
	fake.getOrganizationSpacesMutex.Lock()
	fake.getOrganizationSpacesArgsForCall = append(fake.getOrganizationSpacesArgsForCall, struct {
		orgGUID string
	}{orgGUID})
	fake.recordInvocation("GetOrganizationSpaces", []interface{}{orgGUID})
	fake.getOrganizationSpacesMutex.Unlock()
	if fake.GetOrganizationSpacesStub != nil {
		return fake.GetOrganizationSpacesStub(orgGUID)
	} else {
		return fake.getOrganizationSpacesReturns.result1, fake.getOrganizationSpacesReturns.result2, fake.getOrganizationSpacesReturns.result3
	}
}

func (fake *FakeOrgActor) GetOrganizationSpacesCallCount() int {
	fake.getOrganizationSpacesMutex.RLock()
	defer fake.getOrganizationSpacesMutex.RUnlock()
	return len(fake.getOrganizationSpacesArgsForCall)
}

func (fake *FakeOrgActor) GetOrganizationSpacesArgsForCall(i int) string {
	fake.getOrganizationSpacesMutex.RLock()
	defer fake.getOrganizationSpacesMutex.RUnlock()
	return fake.getOrganizationSpacesArgsForCall[i].orgGUID
}

func (fake *FakeOrgActor) GetOrganizationSpacesReturns(result1 []v2action.Space, result2 v2action.Warnings, result3 error) {
	fake.GetOrganizationSpacesStub = nil
	fake.getOrganizationSpacesReturns = struct {
		result1 []v2action.Space
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeOrgActor) GetOrganizationSpaceQuotaDefinitions(orgGUID string) ([]v2action.SpaceQuotaDefinition, v2action.Warnings, error) {
	fake.getOrganizationSpaceQuotaDefinitionsMutex.Lock()
	fake.getOrganizationSpaceQuotaDefinitionsArgsForCall = append(fake.getOrganizationSpaceQuotaDefinitionsArgsForCall, struct {
		orgGUID string
	}{orgGUID})
	fake.recordInvocation("GetOrganizationSpaceQuotaDefinitions", []interface{}{orgGUID})
	fake.getOrganizationSpaceQuotaDefinitionsMutex.Unlock()
	if fake.GetOrganizationSpaceQuotaDefinitionsStub != nil {
		return fake.GetOrganizationSpaceQuotaDefinitionsStub(orgGUID)
	} else {
		return fake.getOrganizationSpaceQuotaDefinitionsReturns.result1, fake.getOrganizationSpaceQuotaDefinitionsReturns.result2, fake.getOrganizationSpaceQuotaDefinitionsReturns.result3
	}
}

func (fake *FakeOrgActor) GetOrganizationSpaceQuotaDefinitionsCallCount() int {
	fake.getOrganizationSpaceQuotaDefinitionsMutex.RLock()
	defer fake.getOrganizationSpaceQuotaDefinitionsMutex.RUnlock()
	return len(fake.getOrganizationSpaceQuotaDefinitionsArgsForCall)
}

func (fake *FakeOrgActor) GetOrganizationSpaceQuotaDefinitionsArgsForCall(i int) string {
	fake.getOrganizationSpaceQuotaDefinitionsMutex.RLock()
	defer fake.getOrganizationSpaceQuotaDefinitionsMutex.RUnlock()
	return fake.getOrganizationSpaceQuotaDefinitionsArgsForCall[i].orgGUID
}

func (fake *FakeOrgActor) GetOrganizationSpaceQuotaDefinitionsReturns(result1 []v2action.SpaceQuotaDefinition, result2 v2action.Warnings, result3 error) {
	fake.GetOrganizationSpaceQuotaDefinitionsStub = nil
	fake.getOrganizationSpaceQuotaDefinitionsReturns = struct {
		result1 []v2action.SpaceQuotaDefinition
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeOrgActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getOrganizationByNameMutex.RLock()
	defer fake.getOrganizationByNameMutex.RUnlock()
	fake.getOrganizationDomainNamesMutex.RLock()
	defer fake.getOrganizationDomainNamesMutex.RUnlock()
	fake.getQuotaDefinitionMutex.RLock()
	defer fake.getQuotaDefinitionMutex.RUnlock()
	fake.getOrganizationSpacesMutex.RLock()
	defer fake.getOrganizationSpacesMutex.RUnlock()
	fake.getOrganizationSpaceQuotaDefinitionsMutex.RLock()
	defer fake.getOrganizationSpaceQuotaDefinitionsMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeOrgActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v2.OrgActor = new(FakeOrgActor)
